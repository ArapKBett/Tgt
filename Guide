## üèÜ **Best Free Hosting Options (24/7 Uptime)**

### 1. **Railway.app** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
**Free Tier:** 500 hours/month + $5 credit
**Perfect for small bots!**

```bash
# Setup Railway
npm install -g @railway/cli
railway login
railway init
railway up
```

**railway.json:**
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "DOCKERFILE"
  },
  "deploy": {
    "startCommand": "python telegram_bot.py",
    "healthcheckPath": "/health",
    "restartPolicyType": "ON_FAILURE"
  }
}
```

### 2. **Render.com** ‚≠ê‚≠ê‚≠ê‚≠ê
**Free Tier:** 750 hours/month
**Great for Python apps**

**render.yaml:**
```yaml
services:
  - type: web
    name: telegram-script-bot
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python telegram_bot.py
    plan: free
    envVars:
      - key: TELEGRAM_BOT_TOKEN
        sync: false
```

### 3. **Fly.io** ‚≠ê‚≠ê‚≠ê‚≠ê
**Free Tier:** 160GB-hours/month
**Excellent performance**

**fly.toml:**
```toml
app = "telegram-script-bot"
primary_region = "iad"

[build]
  dockerfile = "Dockerfile"

[[services]]
  internal_port = 8080
  protocol = "tcp"

  [[services.ports]]
    port = 80
    handlers = ["http"]

  [[services.ports]]
    port = 443
    handlers = ["tls", "http"]

[env]
  PORT = "8080"
```

### 4. **Heroku** ‚≠ê‚≠ê‚≠ê
**Free Tier:** 550-1000 dyno hours/month
**Classic choice**

**Procfile:**
```
worker: python telegram_bot.py
```

**app.json:**
```json
{
  "name": "Telegram Script Bot",
  "description": "A bot for running scripts continuously",
  "image": "heroku/python",
  "addons": [],
  "env": {
    "TELEGRAM_BOT_TOKEN": {
      "description": "Your Telegram Bot Token"
    }
  }
}
```

---

## üîß **Setup Instructions for Each Platform**

### **Railway.app Setup:**

1. **Install Railway CLI:**
   ```bash
   npm install -g @railway/cli
   ```

2. **Login and Initialize:**
   ```bash
   railway login
   railway init
   ```

3. **Add environment variables:**
   ```bash
   railway variables set TELEGRAM_BOT_TOKEN=your_token_here
   ```

4. **Deploy:**
   ```bash
   railway up
   ```

### **Render.com Setup:**

1. **Connect GitHub repo**
2. **Create new Web Service**
3. **Set environment variables in dashboard**
4. **Deploy automatically**

### **Fly.io Setup:**

1. **Install Fly CLI:**
   ```bash
   curl -L https://fly.io/install.sh | sh
   ```

2. **Login and launch:**
   ```bash
   fly auth login
   fly launch
   ```

3. **Set secrets:**
   ```bash
   fly secrets set TELEGRAM_BOT_TOKEN=your_token_here
   ```

4. **Deploy:**
   ```bash
   fly deploy
   ```

### **Heroku Setup:**

1. **Install Heroku CLI**
2. **Create app:**
   ```bash
   heroku create your-bot-name
   ```

3. **Set environment variables:**
   ```bash
   heroku config:set TELEGRAM_BOT_TOKEN=your_token_here
   ```

4. **Deploy:**
   ```bash
   git push heroku main
   ```

---

## üì¶ **Optimized Files for Free Hosting**

### **Lightweight Dockerfile:**
```dockerfile
FROM python:3.11-slim

# Install only essential packages
RUN apt-get update && apt-get install -y \
    gcc g++ openjdk-17-jdk-headless \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .
RUN mkdir -p user_scripts script_logs

EXPOSE 8080

# Add health check endpoint
COPY health_check.py .

CMD ["python", "telegram_bot.py"]
```

### **requirements.txt (Minimal):**
```txt
python-telegram-bot==20.7
aiofiles==23.1.0
psutil==5.9.5
```

### **Health Check Script:**
```python
# health_check.py
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import json

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"status": "healthy"}).encode())
        else:
            self.send_response(404)
            self.end_headers()

def start_health_server():
    server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
    server.serve_forever()

if __name__ == "__main__":
    threading.Thread(target=start_health_server, daemon=True).start()
```

---

## üí° **Tips for Free Hosting Success**

### **Memory Optimization:**
- Use SQLite instead of PostgreSQL
- Limit concurrent scripts to 2-3
- Enable aggressive cleanup
- Compress logs regularly

### **Resource Management:**
```python
# Add to config.json
"hosting": {
  "memory_efficient": true,
  "max_concurrent_scripts": 2,
  "aggressive_cleanup": true,
  "compress_old_data": true
}
```

### **Keep-Alive Strategies:**

1. **UptimeRobot (Free):**
   - Monitor your app URL
   - Ping every 5 minutes
   - Prevents sleeping

2. **Cron-job.org (Free):**
   - Schedule HTTP requests
   - Keep your app awake

3. **Self-ping method:**
```python
import asyncio
import aiohttp

async def keep_alive():
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                await session.get('https://your-app-url.com/health')
        except:
            pass
        await asyncio.sleep(300)  # 5 minutes
```

---

## üéØ **Recommended Stack for 24/7 Operation**

### **Best Combination:**
1. **Primary:** Railway.app (500 hours/month)
2. **Backup:** Render.com (750 hours/month)
3. **Monitor:** UptimeRobot
4. **Database:** SQLite (included)

### **Environment Variables to Set:**
```bash
TELEGRAM_BOT_TOKEN=your_bot_token
PYTHON_VERSION=3.11
NODE_VERSION=18
```

---

## üîê **Security for Free Hosting**

### **Environment Variables (Never hardcode):**
```bash
# Set these in your hosting platform
TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHijklmnopQRSTuvwxyz
ADMIN_USER_ID=123456789
DATABASE_URL=sqlite:///telegram_bot.db
```

### **Restricted config.json for hosting:**
```json
{
  "max_scripts_per_user": 2,
  "max_script_size": 10000,
  "execution_limits": {
    "memory_mb": 128,
    "cpu_percent": 25
  },
  "security": {
    "strict_mode": true,
    "enable_sandbox": false
  }
}
```

---

## ‚ö° **Quick Start Commands**

### **Railway (Recommended):**
```bash
npx @railway/cli login
npx @railway/cli init
npx @railway/cli variables set TELEGRAM_BOT_TOKEN=your_token
npx @railway/cli up
```

### **Render:**
1. Fork repo on GitHub
2. Connect to Render.com
3. Add environment variables
4. Deploy automatically

### **Fly.io:**
```bash
curl -L https://fly.io/install.sh | sh
fly launch --dockerfile
fly secrets set TELEGRAM_BOT_TOKEN=your_token
fly deploy
```

---

## üìä **Monitoring Your Bot**

### **Free Monitoring Tools:**
- **UptimeRobot** - 50 monitors free
- **Pingdom** - 1 monitor free
- **StatusCake** - 10 monitors free

### **Bot Health Endpoint:**
Add this to your main bot file:
```python
from aiohttp import web
import aiohttp_cors

async def health_check(request):
    return web.json_response({"status": "healthy", "uptime": "running"})

# Add health check server
app = web.Application()
app.router.add_get('/health', health_check)
web.run_app(app, port=8080)
```

This setup will give you a robust, free 24/7 hosting solution for your Telegram script runner bot! üöÄ
